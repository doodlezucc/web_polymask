import 'dart:math';

import 'package:web_polymask/math/polygon.dart';
// import 'package:web_polymask/math/polymath.dart';
// import 'package:web_polymask/polygon_canvas_data.dart';

void main() {
  // final state = parseState(
  //     '(positive, 225,286 233,272 229,272 236,259 235,259 278,184 294,158 295,160 303,147 304,149 312,136 314,139 322,125 325,130 333,115 336,120 344,106 348,113 357,98 361,105 370,90 375,98 383,84 389,94 397,79 403,89 411,75 418,87 426,73 433,85 441,71 448,83 456,69 464,83 472,69 480,82 487,69 495,83 502,70 510,84 517,72 525,86 531,75 539,89 545,79 553,93 558,85 567,100 571,93 579,107 582,102 590,117 593,112 600,125 601,124 609,137 610,135 618,148 661,223 668,236 667,236 674,249 671,249 679,263 676,263 684,277 679,277 687,291 678,291 687,307 678,307 687,322 678,322 687,337 678,337 687,352 677,352 686,368 674,368 682,382 671,382 679,396 667,396 675,410 664,410 672,424 659,424 667,438 654,438 662,452 649,452 656,465 641,465 648,477 633,477 640,489 623,489 629,500 612,500 618,510 601,510 606,518 588,518 593,526 577,526 580,532 563,532 566,537 550,537 552,540 536,540 537,542 521,542 522,544 375,544 376,543 360,543 361,541 345,541 347,537 331,537 333,534 317,534 319,530 303,530 306,525 289,525 292,520 275,520 278,514 262,514 265,508 249,508 254,500 237,500 243,490 226,490 232,479 215,479 222,466 209,466 217,452 205,452 214,437 203,437 211,423 200,423 209,408 200,408 209,393 200,393 209,378 200,378 209,363 201,363 210,348 202,348 238,286), (negative, 287,363 277,363 286,378 277,378 286,393 277,393 286,408 277,408 286,423 281,423 289,437 287,437 288,439 292,433 300,447 305,439 313,453 318,445 326,460 332,450 340,465 346,455 354,469 360,459 368,473 374,462 382,476 388,466 396,480 403,468 411,482 418,469 426,482 433,469 441,483 449,469 457,482 464,469 472,482 479,469 486,481 494,467 501,479 509,465 515,476 523,462 529,472 537,457 542,465 550,451 554,458 563,443 567,449 575,435 578,440 586,425 587,427 589,424 586,424 594,410 589,410 597,396 593,396 601,382 596,382 604,368 600,368 609,352 601,352 610,337 601,337 610,322 601,322 610,307 601,307 610,291 601,291 609,277 598,277 606,263 593,263 601,249 588,249 595,236 582,236 589,223 575,223 582,210 567,210 573,199 558,199 565,187 550,187 556,177 539,177 544,168 528,168 533,160 515,160 518,154 502,154 504,150 488,150 490,147 474,147 475,146 468,146 469,148 453,148 454,150 438,150 440,154 423,154 426,159 410,159 413,165 395,165 400,173 382,173 387,181 371,181 376,190 359,190 365,200 349,200 355,211 340,211 346,222 331,222 337,233 322,233 329,246 314,246 321,259 308,259 315,272 303,272 311,286 252,286 288,348 278,348)');

  // final data = PolygonCanvasData()
  //   ..fromData(
  //       '(negative, 561,402 557,402 559,405), (positive, 97,314 104,301 147,226 148,228 156,215 157,217 165,204 167,207 175,193 177,197 186,182 190,190 199,175 204,184 213,169 219,179 227,165 233,175 241,161 247,172 256,157 262,167 270,153 277,166 286,151 292,162 300,148 307,161 316,146 323,158 331,144 338,157 346,143 354,156 362,142 369,155 377,141 385,154 392,141 400,154 407,141 415,155 423,141 431,155 439,141 447,155 454,142 462,156 469,143 477,157 484,145 492,159 498,149 506,163 512,152 520,167 526,157 534,171 539,163 547,177 549,174 556,187 557,186 600,261 599,261 606,274 604,274 612,288 611,288 618,301 615,301 623,315 620,315 628,329 625,329 633,343 628,343 636,357 629,357 638,372 630,372 639,387 630,387 639,402 630,402 639,417 626,417 634,431 621,431 628,444 613,444 619,455 604,455 610,466 594,466 599,475 582,475 587,483 569,483 573,490 550,490 555,498 538,498 541,503 525,503 527,507 511,507 513,511 497,511 499,514 483,514 484,516 468,516 469,518 452,518 453,519 437,519 438,520 290,520 291,519 275,519 277,515 261,515 263,512 246,512 247,510 231,510 233,507 217,507 219,503 203,503 206,498 189,498 192,493 175,493 178,487 162,487 166,480 149,480 153,473 136,473 141,465 124,465 129,457 112,457 118,446 103,446 110,433 96,433 103,420 90,420 97,407 82,407 90,393 77,393 85,379 73,379 82,364 73,364 102,314), (negative, 159,364 130,314 183,314 176,301 190,301 184,290 199,290 193,279 208,279 202,268 218,268 212,257 229,257 225,250 242,250 239,244 256,244 254,240 270,240 268,236 284,236 282,232 299,232 297,228 313,228 312,226 329,226 327,223 343,223 342,221 359,221 358,219 374,219 373,218 389,218 388,217 405,217 404,216 412,216 411,217 427,217 426,218 442,218 441,220 457,220 455,224 471,224 469,227 486,227 483,232 499,232 496,238 512,238 506,249 521,249 514,261 527,261 520,274 534,274 526,288 539,288 532,301 545,301 537,315 550,315 542,329 555,329 547,343 558,343 550,357 561,357 552,372 562,372 553,387 562,387 553,402 555,402 548,415 544,408 535,424 530,415 519,435 512,423 504,438 498,428 490,442 484,432 476,446 470,436 462,450 456,439 448,453 441,441 433,455 426,443 418,457 410,444 402,458 395,445 387,459 379,445 371,459 363,445 356,458 348,445 341,458 333,445 326,458 318,444 312,454 304,440 297,452 289,437 282,449 274,435 268,446 260,432 254,442 246,428 240,438 232,423 226,433 218,418 213,426 205,412 201,420 192,405 188,413 179,398 175,404 167,390 163,396 161,393 163,393 155,379 159,379 150,364), (positive, 172,298 215,373 129,373)');
  // final state = data.polygons.toSet();
  // final a = Polygon(points: parse('248,258 291,333 205,333'));
  // final b = Polygon(
  //     points: parse(
  //         '500,300 418,394 403,394 410,381 394,381 401,368 386,368 393,355 380,355 387,342'));

  // final out = union(a, b);
  // print(out.first.isSimple());
  // return print(out.toList());

  // final out = mergePolygon(state, a);

  // final diffAdd = out.difference(state);
  // final diffSub = state.difference(out);

  // for (var poly in diffAdd) {
  //   forceClockwise(poly);
  //   print('- add $poly');
  // }
  // for (var poly in diffSub) {
  //   forceClockwise(poly);
  //   print(' - sub $poly');
  // }
}

List<Point<int>> parse(String s) {
  return s.split(' ').map((co) {
    var parts = co.split(',');
    return Point(int.parse(parts[0]), int.parse(parts[1]));
  }).toList();
}

final polygonRegex = RegExp(r'\((\w+), (.*?)\)');

Set<Polygon> parseState(String s) {
  return polygonRegex
      .allMatches(s)
      .map((m) => Polygon(positive: m[1] == 'positive', points: parse(m[2])))
      .toSet();
}
